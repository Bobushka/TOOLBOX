from fastapi import FastAPI, Form
from fastapi.responses import HTMLResponse
from fastapi.concurrency import run_in_threadpool
import yt_dlp
import os
from pathlib import Path
import socket


"""
‚úÖ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
- –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ http://localhost:8000
- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ YouTube
- –°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ (–≤–∏–¥–µ–æ + –∞—É–¥–∏–æ)
- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–∞–ø–∫—É ~/Downloads

‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
pip install fastapi uvicorn yt-dlp python-multipart

‚ñ∂Ô∏è –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å:
- python yt_fastapi_v2.py
- –ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ http://localhost:8000

üìÇ –ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ñ–∞–π–ª—ã:
–°–∫–∞—á–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–∞–ø–∫—É Downloads —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (~/Downloads).
"""


# –£–≤–µ–ª–∏—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç —Å–æ–∫–µ—Ç–∞
socket.setdefaulttimeout(60)

# –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DOWNLOADS_PATH = str(Path.home() / "Downloads")

app = FastAPI()

HTML_FORM = """
<html>
<head><title>YouTube Downloader</title></head>
<body>
    <h2>–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube</h2>
    <form action="/download" method="post">
        <input type="text" name="url" size="60" required>
        <button type="submit">–°–∫–∞—á–∞—Ç—å</button>
    </form>
    <p>{{ result }}</p>
</body>
</html>
"""

@app.get("/", response_class=HTMLResponse)
async def form_page():
    return HTML_FORM.replace("{{ result }}", "")

@app.post("/download", response_class=HTMLResponse)
async def download_video(url: str = Form(...)):
    def _download():
        ydl_opts = {
            'format': 'bestvideo+bestaudio/best',
            'outtmpl': os.path.join(DOWNLOADS_PATH, '%(title)s.%(ext)s'),
            'noplaylist': True,
            'merge_output_format': 'mp4',
            'retries': 30,  # —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            'fragment_retries': 30,
            'socket_timeout': 30,
            'continuedl': True,
            'concurrent_fragment_downloads': 1,  # –≤–∞–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        }
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([url])
            return "‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫–µ Downloads."
        except Exception as e:
            return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

    result = await run_in_threadpool(_download)
    return HTML_FORM.replace("{{ result }}", result)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("yt_fastapi_v2:app", host="127.0.0.1", port=8000, reload=True)