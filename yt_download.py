from fastapi import FastAPI, Form
from fastapi.responses import HTMLResponse
from fastapi.concurrency import run_in_threadpool
import yt_dlp
import os
from pathlib import Path
from contextlib import asynccontextmanager
from threading import Event
import signal
import socket


"""
‚úÖ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
- –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ http://localhost:8000
- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ YouTube
- –°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ (–≤–∏–¥–µ–æ + –∞—É–¥–∏–æ)
- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–∞–ø–∫—É ~/Downloads

‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
pip install fastapi uvicorn yt-dlp python-multipart

‚ñ∂Ô∏è –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å:
- python yt_download.py
- –ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ http://localhost:8000

üìÇ –ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ñ–∞–π–ª—ã:
–°–∫–∞—á–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–∞–ø–∫—É Downloads —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (~/Downloads).
"""


# –£–≤–µ–ª–∏—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç —Å–æ–∫–µ—Ç–∞
socket.setdefaulttimeout(60)

# –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DOWNLOADS_PATH = str(Path.home() / "Downloads")

# –°–æ–±—ã—Ç–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–º–µ–Ω—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏
shutdown_event_trigger = Event()

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ö–æ–¥ –¥–æ `yield` –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ,
    –∫–æ–¥ –ø–æ—Å–ª–µ `yield` ‚Äî –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.
    """
    # –ö–æ–¥, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (startup)
    print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Ctrl+C.")
    original_sigint_handler = signal.getsignal(signal.SIGINT)

    def custom_sigint_handler(signum, frame):
        print("\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ Ctrl+C. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Ç–º–µ–Ω—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
        shutdown_event_trigger.set()
        if callable(original_sigint_handler):
            original_sigint_handler(signum, frame)

    signal.signal(signal.SIGINT, custom_sigint_handler)
    
    yield  # –ó–¥–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    # –ö–æ–¥, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ (shutdown)
    print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")

app = FastAPI(lifespan=lifespan)
HTML_TEMPLATE = """
<html>
<head>
    <title>YouTube Downloader</title>
    <style>
        body {
            background-color: #121212;
            color: #e0e0e0;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
        }
        h2 {
            color: #ffffff;
        }
        form {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        input[type="text"] {
            background-color: #2c2c2c;
            color: #e0e0e0;
            border: 1px solid #444;
            padding: 10px;
            border-radius: 4px;
            font-size: 16px;
        }
        button {
            background-color: #bb86fc;
            color: #121212;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
        }
        button:hover {
            background-color: #a76ef4;
        }
        p {
            font-size: 16px;
        }
        a.button-link {
            display: block;
            margin-bottom: 20px;
            text-decoration: none;
        }
    </style>
</head>
<body>
    <h2>–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube</h2>
    {{ form_section }}
    <p>{{ result }}</p>
    <script>
        const form = document.getElementById('download-form');
        if (form) {
            const button = document.getElementById('download-button');
            const urlInput = form.querySelector('input[name="url"]');

            form.addEventListener('submit', (event) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –ø—É—Å—Ç–æ–µ (—Ö–æ—Ç—è 'required' —É–∂–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç)
                if (urlInput && urlInput.value.trim() !== '') {
                    button.disabled = true;
                    button.style.backgroundColor = '#555'; // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–µ—Ä–æ–π
                    button.innerText = '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ...';
                }
            });
        }
    </script>
</body>
</html>
"""

FORM_SECTION_HTML = """
<form id="download-form" action="/download" method="post">
    <input type="text" name="url" size="60" required>
    <button id="download-button" type="submit">–°–∫–∞—á–∞—Ç—å</button>
</form>
"""

RESULT_SECTION_HTML = '<a href="/" class="button-link"><button>–°–∫–∞—á–∞—Ç—å –µ—â–µ</button></a>'

@app.get("/", response_class=HTMLResponse)
async def form_page():
    page = HTML_TEMPLATE.replace("{{ form_section }}", FORM_SECTION_HTML)
    return page.replace("{{ result }}", "")

def _download_task(url: str, cancel_event: Event):
    """–§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    def progress_hook(_):
        if cancel_event.is_set():
            raise yt_dlp.utils.DownloadCancelled('Download cancelled by server shutdown.')

    ydl_opts = {
        'format': 'bestvideo+bestaudio/best',
        'outtmpl': os.path.join(DOWNLOADS_PATH, '%(title)s.%(ext)s'),
        'noplaylist': True,
        'merge_output_format': 'mp4',
        'retries': 30,
        'fragment_retries': 50,
        'socket_timeout': 10,
        'continuedl': True,
        'concurrent_fragment_downloads': 1,
        'progress_hooks': [progress_hook],  # –î–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        return "‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫–µ Downloads."
    except yt_dlp.utils.DownloadCancelled:
        return "‚ÑπÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
    except Exception as e:
        return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

@app.post("/download", response_class=HTMLResponse)
async def download_video(url: str = Form(...)):
    shutdown_event_trigger.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    result = await run_in_threadpool(_download_task, url, shutdown_event_trigger)
    page = HTML_TEMPLATE.replace("{{ form_section }}", RESULT_SECTION_HTML)
    return page.replace("{{ result }}", result)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("yt_download:app", host="127.0.0.1", port=8000, reload=True)